(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:-146.47956658802784,beta:1.4065900421142554,r:2.9408349370553344,offset_after_material:0.00002),uniforms:(ids:(available:[(5),(6),(9),(10)],max:30),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Named(Bool(true),"enable_border"),(4):Named(Int((min:Some(0),max:Some(3),value:3)),"enable_cylinder_degrees"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(11):Named(Formula(("0.01")),"black_border"),(12):Named(Float((min:Some(0),max:Some(0.3),value:0.055)),"border"),(13):Named(Bool(true),"enable_portals"),(14):Named(Float((min:Some(-0.93),max:Some(0.93),value:-0.25)),"ra"),(15):Named(Float((min:Some(0.03),max:Some(0.99),value:0.99)),"t"),(16):Named(Formula(("e()^(ra/(1-abs(ra)))")),"r1"),(17):Named(Formula(("1")),"r2"),(18):Named(Formula(("2*t*min(r1, r2)")),"o1"),(19):Named(Formula(("r1+r2-o1")),"r3"),(20):Named(Formula(("(r1^2+r3^2-r2^2)/(2*r3)")),"o2"),(21):Named(Formula(("sqrt(r1^2-o2^2)")),"h"),(22):Inline(Formula(("r2/h"))),(23):Inline(Formula((""))),(24):Inline(Formula(("r1/h"))),(25):Inline(Formula((""))),(26):Inline(Formula(("-o2/h"))),(27):Inline(Formula(("(r3-o2)/h"))),(28):Named(Bool(true),"enable_cylinder"),(29):Named(Bool(true),"enable_room")},storage_order:[(0),(1),(2),(7),(8),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(28),(29),(3),(4)]),matrices:(ids:(available:[(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(17)],max:28),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room"),(13):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(14):Named(Simple(offset:(0,0,0),scale:1,rotate:(2.792526803190927,0,0),mirror:(false,false,false)),"a_rot"),(15):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"b_rot"),(16):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(18):Named(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((26))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:Yes(Some(((24))))),"a1"),(19):Named(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((27))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:Yes(Some(((22))))),"b1"),(20):Named(Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((0)))),"room_b"),(21):Named(Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((0)))),"room_a"),(22):Named(Mul(to:Some(((14))),what:Some(((18)))),"a_final"),(23):Named(Mul(to:Some(((15))),what:Some(((19)))),"b_final"),(24):Named(Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((21)))),"room_a2"),(25):Named(Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((24)))),"room_a3"),(26):Named(Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((20)))),"room_b2"),(27):Named(Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((26)))),"room_b3")},storage_order:[(0),(18),(19),(14),(15),(22),(23),(20),(21),(24),(25),(26),(27)]),objects:(ids:(available:[(1),(2),(3),(4),(5)],max:13),storage:{(0):Named(Complex(kind:Simple(Some(((21)))),intersect:(("// cylinder_a\r\n\r\nif (enable_cylinder_degrees_u < 1) return scene_intersection_none;\r\n\r\nif (enable_cylinder_u == 0) return scene_intersection_none;\r\n\r\nTwoSceneIntersections res = intersect_cylinder(r, 1.0, border_u, 1.0, grid_gray_M);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  if (si.hit.hit) {\r\n    vec4 pos = room_mat * (r.o + r.d * si.hit.t);\r\n    vec4 pos_a = room_a_mat * (r.o + r.d * si.hit.t);\r\n    bool first = pos.z < 0.;\r\n    if (\r\n      (!first && outside_a(pos) && outside_b(pos)) ||\r\n      (first && inside_a(pos) && inside_b(pos) && inside_a(pos_a) && outside_b(pos_a))\r\n    ) {\r\n      // if (first) si.material = solid_2_M; else si.material = solid_3_M;\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"cylinder_a"),(6):Named(Complex(kind:Portal(Some(((22))),Some(((23)))),intersect:(("if (enable_portals_u == 0) return scene_intersection_none;\n\nvec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x) / PI;\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y) / PI;\n\nint material = TELEPORT;\nif (teleport_light_u == 0) {\nif (first) material = solid_0_M;\nelse material = solid_1_M;\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, u, v, n), false);")),in_subspace:Normal),"sphere"),(7):Named(Flat(kind:Simple(Some(((16)))),is_inside:(("if (enable_border_u == 0) return NOT_INSIDE;\n\nfloat dist = sqrt(x*x + y*y);\nif (dist < 1. + border_u && dist > 1. - border_u) {\n  if (dist > 1. + border_u - black_border_u || dist < 1. - border_u + black_border_u || (dist > 1. && dist < 1. + black_border_u)) {\n    return solid_black_M;\n  } else {\n    if (dist > 1.) {\n      return portal_green_M;\n    } else {\n      if (back) {\n        return portal_red_M;\n      } else {\n        return portal_blue_M;\n      }\n    }\n  }\n} else {\n  return NOT_INSIDE;\n}")),in_subspace:Normal),"border"),(8):Named(Complex(kind:Simple(Some(((0)))),intersect:(("// cylinder\r\n\r\nif (enable_cylinder_u == 0) return scene_intersection_none;\r\n\r\nTwoSceneIntersections res = intersect_cylinder(r, 1.0, border_u, 1.0, grid_gray_M);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  if (si.hit.hit) {\r\n    vec4 pos = room_mat * (r.o + r.d * si.hit.t);\r\n    bool first = pos.z < 0.;\r\n    if (\r\n      (first && inside_a(pos) && outside_b(pos)) ||\r\n      (!first && inside_b(pos) && outside_a(pos))\r\n    ) {\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"cylinder"),(9):Named(Complex(kind:Simple(Some(((0)))),intersect:(("if (enable_room_u == 0) return scene_intersection_none;\n\nTwoSceneIntersections res = intersect_room(r);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  if (si.hit.hit) {\r\n    vec4 glob_pos = room_mat * (r.o + r.d * si.hit.t);\r\n    if (\r\n      length((a_final_mat_inv * glob_pos).xyz) > 1.\r\n      && length((b_final_mat_inv * glob_pos).xyz) > 1.\r\n    ) {\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"room"),(10):Named(Complex(kind:Simple(Some(((20)))),intersect:(("if (enable_room_u == 0) return scene_intersection_none;\n\nTwoSceneIntersections res = intersect_room(r);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  //si.material = solid_2_M;\n  if (si.hit.hit) {\r\n    vec4 prev_pos = room_mat * (r.o + r.d * si.hit.t);\r\n    if (\r\n      length((a_final_mat_inv * prev_pos).xyz) < 1.\r\n      && (ra_u > 0. || length((b_final_mat_inv * prev_pos).xyz) > 1.)\n    ) {\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"room_b"),(11):Named(Complex(kind:Simple(Some(((21)))),intersect:(("if (enable_room_u == 0) return scene_intersection_none;\n\nTwoSceneIntersections res = intersect_room(r);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  //si.material = solid_3_M;\n  if (si.hit.hit) {\r\n    vec4 prev_pos = room_mat * (r.o + r.d * si.hit.t);\r\n    if (\r\n      length((b_final_mat_inv * prev_pos).xyz) < 1.\r\n      && (ra_u < 0. || length((a_final_mat_inv * prev_pos).xyz) > 1.\r)\n    ) {\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"room_a"),(12):Named(Complex(kind:Simple(Some(((20)))),intersect:(("// cylinder_b\r\n\r\nif (enable_cylinder_degrees_u < 1) return scene_intersection_none;\r\n\r\nif (enable_cylinder_u == 0) return scene_intersection_none;\r\n\r\nTwoSceneIntersections res = intersect_cylinder(r, 1.0, border_u, 1.0, grid_gray_M);\r\n\r\nfor (int i = 0; i < 2; i++) {\r\n  SceneIntersection si = get_from_two(res, i);\r\n  if (si.hit.hit) {\r\n    vec4 pos = room_mat * (r.o + r.d * si.hit.t);\r\n    vec4 pos_b = room_b_mat * (r.o + r.d * si.hit.t);\r\n    bool first = pos.z < 0.;\r\n    if (\r\n      (first && outside_a(pos) && outside_b(pos)) ||\r\n      (!first && inside_a(pos) && inside_b(pos) && inside_b(pos_b) && outside_a(pos_b))\r\n    ) {\r\n      // if (first) si.material = solid_2_M; else si.material = solid_3_M;\r\n      return si;\r\n    }\r\n  }\r\n}\r\n\r\nreturn scene_intersection_none;")),in_subspace:Normal),"cylinder_b")},storage_order:[(6),(9),(11),(10),(7),(8),(0),(12)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:0),storage:{},storage_order:[]),materials:(ids:(available:[(15),(16),(19),(20)],max:22),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.28627450980392155,0.3411764705882353,0.9294117647058824),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_blue"),(7):Named(Simple(color:(0.9686274509803922,0.19607843137254902,0.19607843137254902),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_red"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_white"),(11):Named(Simple(color:(1,0.5137254901960784,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:16,grid_coef:0.3,grid2:true,grid3:false),"solid_0"),(12):Named(Simple(color:(0.19607843137254902,0.9176470588235294,0.9725490196078431),normal_coef:0.5,grid:true,grid_scale:16,grid_coef:0.3,grid2:true,grid3:false),"solid_1"),(13):Named(Simple(color:(1,0,0.996078431372549),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_3"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_black"),(21):Named(Simple(color:(0.34509803921568627,0.9215686274509803,0.23529411764705882),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_green")},storage_order:[(0),(2),(1),(3),(4),(5),(6),(7),(21),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),intersection_materials:(ids:(available:[],max:0),storage:{},storage_order:[]),library:(ids:(available:[],max:7),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}\n")),"portal"),(4):Named((("TwoSceneIntersections intersect_cylinder(Ray r, float radius, float height, float progress, int material) {\r\n  float a = dot(r.d.xy, r.d.xy);\r\n  float b = 2.0 * dot(r.o.xy, r.d.xy);\r\n  float c = dot(r.o.xy, r.o.xy) - sqr(radius);\r\n  float det = b*b - 4.0 * a * c;\r\n\r\n  if (det < 0.) return TwoSceneIntersections(scene_intersection_none, scene_intersection_none);\r\n\r\n  det = sqrt(det);\r\n\r\n  float t = (-b - det)/(2.*a);\r\n  vec4 pos = r.o + r.d * t;\r\n  float u = atan(pos.y, pos.x) * radius;\r\n  float v = pos.z;\r\n  \r\n  SceneIntersection res1 = scene_intersection_none;\r\n  if (t > 0. && abs(v) < height && u / radius + PI < progress * 2. * PI) {\r\n    vec3 n = normalize(vec3(pos.xy, 0.));\r\n    if (pos.z > 0.) { material = portal_red_M; }\r\n    else { material = portal_blue_M; }\r\n    if (abs(pos.z) > border_u - black_border_u) { material = solid_black_M; }\r\n    res1 =  SceneIntersection(material, SurfaceIntersection(true, t, u, v, n), false);\r\n  }\r\n\r\n  t = (-b + det)/(2.*a);\r\n  pos = r.o + r.d * t;\r\n  u = atan(pos.y, pos.x) * radius;\r\n  v = pos.z;\r\n\r\n  SceneIntersection res2 = scene_intersection_none;\r\n  if (t > 0. && abs(v) < height && u / radius + PI < progress * 2. * PI) {\r\n    vec3 n = normalize(vec3(pos.xy, 0.));\r\n    if (pos.z > 0.) { material = portal_red_M; }\r\n    else { material = portal_blue_M; }\r\n    if (abs(pos.z) > border_u - black_border_u) { material = solid_black_M; }\r\n    res2 = SceneIntersection(material, SurfaceIntersection(true, t, u, v, n), false);\r\n  }\r\n\r\n  return TwoSceneIntersections(res1, res2);\r\n}")),"cylinder"),(5):Named((("SceneIntersection process_t_room(Ray r, float t, vec3 oN) {\r\n  if (t < 0.) return scene_intersection_none;\r\n  vec3 sizes = vec3(room_size_x_u, room_size_y_u, room_size_z_u);\r\n\r\n  vec3 pos = (r.o + r.d * t).xyz;\r\n\r\n  int material_pos = 1;\r\n\r\n  vec2 uv = vec2(pos.x, pos.y);\r\n  if (abs(abs(pos.x) - sizes.x) < 0.0001) {\r\n    uv = vec2(pos.y, pos.z);\r\n    material_pos = 2;\r\n  }\r\n  if (abs(abs(pos.y) - sizes.y) < 0.0001) {\r\n    uv = vec2(pos.x, pos.z);\r\n    material_pos = 3;\r\n  }\r\n\r\n  int material = grid_gray_M;\r\n\r\n  if (material_pos == 1 && pos.z > 0.) material = room_blue_M;\r\n  if (material_pos == 1 && pos.z < 0.) material = room_green_M;\r\n  if (material_pos == 2 && pos.x > 0.) material = room_yellow_M;\r\n  if (material_pos == 2 && pos.x < 0.) material = room_red_M;\r\n  if (material_pos == 3 && pos.y > 0.) material = room_black_M;\r\n  if (material_pos == 3 && pos.y < 0.) material = room_gray_M;\r\n\r\n  return SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\r\n}\r\n\r\nstruct TwoSceneIntersections {\r\n  SceneIntersection first;\r\n  SceneIntersection second;  \r\n};\r\n\r\nTwoSceneIntersections intersect_room(Ray r) {\r\n  vec3 sizes = vec3(room_size_x_u, room_size_y_u, room_size_z_u);\r\n\r\n  vec3 m = 1.0 / r.d.xyz;\r\n  vec3 n = m * r.o.xyz;\r\n  vec3 k = abs(m) * sizes;\r\n  vec3 vt1 = -n - k;\r\n  vec3 vt2 = -n + k;\r\n\r\n  float t1 = max(max(vt1.x, vt1.y), vt1.z);\r\n  float t2 = min(min(vt2.x, vt2.y), vt2.z);\r\n\r\n  vec3 n1 = -sign(r.d.xyz) * step(vt1.yzx,vt1.xyz) * step(vt1.zxy,vt1.xyz);\r\n  vec3 n2 = -sign(r.d.xyz) * step(vt2.xyz, vt2.yzx) * step(vt2.xyz, vt2.zxy);\r\n\r\n  if (t1 > t2) return TwoSceneIntersections(\r\n    scene_intersection_none,\r\n    scene_intersection_none\r\n  );\r\n\r\n  return TwoSceneIntersections(\r\n    process_t_room(r, t1, n1),\r\n    process_t_room(r, t2, n2)\r\n  );\r\n}\n\nSceneIntersection get_from_two(TwoSceneIntersections res, int pos) {\r\n  if (pos == 0) return res.first;\r\n  return res.second;\r\n}")),"room2"),(6):Named((("bool inside(mat4 mat, vec4 pos) {\r\n  return length((mat * pos).xyz) < 1.;\r\n}\r\n\r\nbool outside(mat4 mat, vec4 pos) {\r\n  return length((mat * pos).xyz) > 1.;\r\n}\r\n\r\nbool inside_a(vec4 pos) {\r\n  return length((a_final_mat_inv * pos).xyz) < 1.;\r\n}\r\n\r\nbool outside_a(vec4 pos) {\r\n  return length((a_final_mat_inv * pos).xyz) > 1.;\r\n}\r\n\r\nbool inside_b(vec4 pos) {\r\n  return length((b_final_mat_inv * pos).xyz) < 1.;\r\n}\r\n\r\nbool outside_b(vec4 pos) {\r\n  return length((b_final_mat_inv * pos).xyz) > 1.;\r\n}")),"inside_outside")},storage_order:[(2),(0),(1),(3),(5),(4),(6)]),animations_filters:(uniforms:({((0)):false,((1)):false,((2)):false,((3)):true,((4)):true,((7)):true,((8)):false,((11)):false,((12)):false,((13)):true,((14)):true,((15)):true,((16)):false,((17)):false,((18)):false,((19)):false,((20)):false,((21)):false,((28)):true,((29)):true}),matrices:({((0)):false,((14)):true,((15)):true,((18)):false,((19)):false,((20)):false,((21)):false,((22)):false,((23)):false,((24)):false,((25)):false,((26)):false,((27)):false}),cameras:({})),elements_descriptions:(uniforms:({((3)):(help_description:None,overrided_name:"Enable border"),((4)):(help_description:None,overrided_name:"Enable cylinder degrees"),((7)):(help_description:None,overrided_name:"Teleport light"),((13)):(help_description:None,overrided_name:"Enable portals"),((14)):(help_description:None,overrided_name:"Relative size"),((15)):(help_description:None,overrided_name:"Inside position"),((28)):(help_description:None,overrided_name:"Enable cylinder border"),((29)):(help_description:None,overrided_name:"Enable room")}),matrices:({((14)):(help_description:None,overrided_name:"Rotation of A"),((15)):(help_description:None,overrided_name:"Rotation of B")}),cameras:({})),user_uniforms:(uniforms:({((0)):false,((1)):false,((2)):false,((3)):false,((4)):false,((7)):true,((8)):false,((11)):false,((12)):false,((13)):false,((14)):false,((15)):false,((16)):false,((17)):false,((18)):false,((19)):false,((20)):false,((21)):false,((28)):false,((29)):false}),matrices:({((0)):false,((14)):false,((15)):false,((18)):false,((19)):false,((20)):false,((21)):false,((22)):false,((23)):false,((24)):false,((25)):false,((26)):false,((27)):false})),animation_stages:(ids:(available:[],max:1),storage:{(0):Named((name:(eng:"Explore",rus:"Explore"),description:Some((eng:"first - внутри A, синяя граница\r\n!first - внутри B, красная граница\r\n\r\nA - оранжевый портал\r\nB - голубой портал\r\n\r\nA - синяя граница\r\nB - красная граница\r\n\r\nтелепортация из A в B - room_b, красная граница, first",rus:"-")),uniforms:({((0)):FromDev,((1)):FromDev,((2)):FromDev,((3)):ProvidedToUser,((4)):ProvidedToUser,((7)):FromDev,((8)):FromDev,((11)):FromDev,((12)):FromDev,((13)):ProvidedToUser,((14)):ProvidedToUser,((15)):ProvidedToUser,((16)):FromDev,((17)):FromDev,((18)):FromDev,((19)):FromDev,((20)):FromDev,((21)):FromDev,((28)):ProvidedToUser,((29)):ProvidedToUser}),matrices:({((0)):FromDev,((14)):ProvidedToUser,((15)):ProvidedToUser,((18)):FromDev,((19)):FromDev,((20)):FromDev,((21)):FromDev,((22)):FromDev,((23)):FromDev,((24)):FromDev,((25)):FromDev,((26)):FromDev,((27)):FromDev}),original_cam_button:false,set_cam:None,cams:{},hidden:true),"Explore")},storage_order:[(0)]),current_stage:Animation(((0))),dev_stage:(uniforms:({((0)):Float((min:Some(0),max:None,value:4)),((1)):Float((min:Some(0),max:None,value:4)),((2)):Float((min:Some(0),max:None,value:4)),((3)):Bool(true),((4)):Int((min:Some(0),max:Some(3),value:3)),((7)):Bool(true),((8)):Bool(false),((11)):Formula(("0.01")),((12)):Float((min:Some(0),max:Some(0.3),value:0.055)),((13)):Bool(true),((14)):Float((min:Some(-0.93),max:Some(0.93),value:-0.25)),((15)):Float((min:Some(0.03),max:Some(0.99),value:0.99)),((16)):Formula(("e()^(ra/(1-abs(ra)))")),((17)):Formula(("1")),((18)):Formula(("2*t*min(r1, r2)")),((19)):Formula(("r1+r2-o1")),((20)):Formula(("(r1^2+r3^2-r2^2)/(2*r3)")),((21)):Formula(("sqrt(r1^2-o2^2)")),((28)):Bool(true),((29)):Bool(true)}),matrices:({((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,0),scale:1,rotate:(2.792526803190927,0,0),mirror:(false,false,false)),((15)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((18)):Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((26))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:Yes(Some(((24))))),((19)):Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((27))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:Yes(Some(((22))))),((20)):Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((0)))),((21)):Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((0)))),((22)):Mul(to:Some(((14))),what:Some(((18)))),((23)):Mul(to:Some(((15))),what:Some(((19)))),((24)):Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((21)))),((25)):Teleport(first_portal:Some(((23))),second_portal:Some(((22))),what:Some(((24)))),((26)):Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((20)))),((27)):Teleport(first_portal:Some(((22))),second_portal:Some(((23))),what:Some(((26))))})),animations:(ids:(available:[],max:0),storage:{},storage_order:[]),use_time:false,skybox:None)
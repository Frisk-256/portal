(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:-20.63290892496828,beta:1.1821405029296885,r:2.940834937055169,offset_after_material:0.000025),uniforms:(ids:(available:[],max:22),storage:{(0):Named(Float((min:Some(0),max:None,value:6)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:6)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:6)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Bool(false),"debug_object1"),(10):Named(Bool(false),"debug_object2"),(11):Named(Float((min:None,max:None,value:-0.58)),"debug_u"),(12):Named(Float((min:None,max:None,value:0.92)),"debug_v"),(13):Named(Bool(false),"debug_matrix"),(14):Named(Bool(true),"inverse_normal"),(15):Named(Bool(false),"use_half"),(16):Named(Progress(1),"x_scale"),(17):Inline(Formula(("0.01 + x_scale * 0.99"))),(18):Named(Progress(1),"y_scale"),(19):Inline(Formula(("0.01 + y_scale * 0.99"))),(20):Named(Progress(1),"z_scale"),(21):Inline(Formula(("0.01 + z_scale * 0.99")))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(18),(20)]),matrices:(ids:(available:[],max:17),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(1.5,0,0),scale:1,rotate:(0,3.141592653589793,0),mirror:(false,false,false)),"object1"),(14):Named(Simple(offset:(-1.5,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"object2"),(15):Named(Simple(offset:(0,0.77,0),scale:0.24,rotate:(0,0,0),mirror:(false,false,false)),"gray_sphere"),(16):Named(Exact(i:(x:Yes(Some(((17)))),y:No(0),z:No(0)),j:(x:No(0),y:Yes(Some(((19)))),z:No(0)),k:(x:No(0),y:No(0),z:Yes(Some(((21))))),pos:(x:No(0),y:No(0),z:No(0))),"exact")},storage_order:[(0),(13),(14),(15),(16)]),objects:(ids:(available:[],max:11),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);")),in_subspace:Normal),"room_z-"),(6):Named(Complex(kind:Simple(Some(((15)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);")),in_subspace:Normal),"gray_sphere"),(7):Named(Complex(kind:Simple(Some(((13)))),intersect:(("if (debug_matrix_u == 0) return scene_intersection_none;\n\nfloat u = debug_u_u;\nfloat v = debug_v_u;\n\nfloat radius = 0.06;\nfloat offset = 0.01;\n\nmat3 mat = object1_transform_matrix(u, v);\n\nSurfaceIntersection hit = intersection_none;\nSceneIntersection i = SceneIntersection(0, hit, false);\n\nvec3 pos = object1_uv(u, v);\n\nhit = cap(r, pos, pos + mat * vec3(1., 0., 0.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_red_M; }\nhit = cap(r, pos, pos + mat * vec3(0., 1., 0.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_green_M; }\nhit = cap(r, pos, pos + mat * vec3(0, 0., 1.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_blue_M; }\n\nreturn i;")),in_subspace:Normal),"debug_matrix1"),(8):Named(Complex(kind:Simple(Some(((14)))),intersect:(("if (debug_matrix_u == 0) return scene_intersection_none;\n\nfloat u = debug_u_u;\nfloat v = debug_v_u;\n\nfloat radius = 0.06;\nfloat offset = 0.01;\n\nmat3 mat = object2_transform_matrix(u, v);\n\nSurfaceIntersection hit = intersection_none;\nSceneIntersection i = SceneIntersection(0, hit, false);\n\nvec3 pos = object2_uv(u, v);\n\nhit = cap(r, pos, pos + mat * vec3(1., 0., 0.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_red_M; }\nhit = cap(r, pos, pos + mat * vec3(0., 1., 0.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_green_M; }\nhit = cap(r, pos, pos + mat * vec3(0, 0., 1.), radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_blue_M; }\n\nreturn i;")),in_subspace:Normal),"debug_matrix2"),(9):Named(Complex(kind:Simple(Some(((13)))),intersect:(("if (debug_object1_u == 0) return scene_intersection_none;\r\n\r\nSurfaceIntersection hit = intersection_none;\r\nSceneIntersection inter = SceneIntersection(room_red_M, hit, false);\r\n\r\n// bool is_inside = abs(u) < PI && v > 0. && v < PI;\r\nfloat u_min = -PI;\r\nfloat u_max = PI;\r\nfloat v_min = 0.;\r\nfloat v_max = PI;\r\nfloat radius = 0.1;\r\n\r\nint size = 10;\r\nfor (int i = 0; i < 11; i++) { if (i >= size+1) break; // !FOR_NUMBER!\r\nfor (int i = 0; i < size+1; i++) { // !FOR_VARIABLE!\r\n  float u = u_min + float(i)/float(size) * (u_max - u_min);\r\n  for (int j = 0; j < 11; j++) { if (j >= size+1) break; // !FOR_NUMBER!\r\n  for (int j = 0; j < size+1; j++) { // !FOR_VARIABLE!\r\n    float v = v_min + float(j)/float(size) * (v_max - v_min);\r\nhit = cap(r, object1_uv(u, v), object1_uv(u, v), radius); if (nearer(inter, hit)) { inter.hit = hit; }\r\n  }\r\n}\r\n\r\nreturn inter;")),in_subspace:Normal),"debug_uv1"),(10):Named(Complex(kind:Simple(Some(((14)))),intersect:(("if (debug_object2_u == 0) return scene_intersection_none;\r\n\r\nSurfaceIntersection hit = intersection_none;\r\nSceneIntersection inter = SceneIntersection(room_blue_M, hit, false);\r\n\r\n// bool is_inside = abs(u) < PI && v > 0. && v < PI;\r\nfloat u_min = -PI;\r\nfloat u_max = PI;\r\nfloat v_min = 0.;\r\nfloat v_max = PI;\r\nfloat radius = 0.1;\r\n\r\nint size = 10;\r\nfor (int i = 0; i < 11; i++) { if (i >= size+1) break; // !FOR_NUMBER!\r\nfor (int i = 0; i < size+1; i++) { // !FOR_VARIABLE!\r\n  float u = u_min + float(i)/float(size) * (u_max - u_min);\r\n  for (int j = 0; j < 11; j++) { if (j >= size+1) break; // !FOR_NUMBER!\r\n  for (int j = 0; j < size+1; j++) { // !FOR_VARIABLE!\r\n    float v = v_min + float(j)/float(size) * (v_max - v_min);\r\nhit = cap(r, object2_uv(u, v), object2_uv(u, v), radius); if (nearer(inter, hit)) { inter.hit = hit; }\r\n  }\r\n}\r\n\r\nreturn inter;")),in_subspace:Normal),"debug_uv2")},storage_order:[(0),(1),(2),(3),(4),(5),(9),(10),(7),(8),(6)]),cameras:(ids:(available:[],max:2),storage:{(0):Named((look_at:MatrixCenter(Some(((13)))),alpha:5.231252328007092,beta:1.134676454859327,r:3.1818181818182962,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"plane"),(1):Named((look_at:MatrixCenter(Some(((14)))),alpha:5.231252328007092,beta:1.134676454859327,r:3.1818181818182962,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"sphere")},storage_order:[(0),(1)]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:true,grid_scale:16,grid_coef:0.3,grid2:true,grid3:false),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:16,grid_coef:0.3,grid2:true,grid3:false),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(2.627450980392157e-1, 8.470588235294118e-1, 3.0196078431372547e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(3.137254901960784e-1, 3.8823529411764707e-1, 9.254901960784314e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),intersection_materials:(ids:(available:[],max:2),storage:{(0):Named(((("r = transform(object2_mat_inv, r);\r\nfloat len = length(r.d);\r\nr = normalize_ray(r);\r\nSurfaceIntersection i = intersect_object2(r);\r\ni.t /= len;\r\n\r\nmat3 object2_mat_custom = object2_transform_matrix(i.u, i.v);\r\n\r\nif (teleport_light_u == 0) {\r\n    vec3 normal = adjugate(object2_mat_inv) * object2_mat_custom * vec3(1., 0., 0.);\r\n    return SceneIntersectionWithMaterial(\r\n        SceneIntersection(portal_blue_M, SurfaceIntersection(true, i.t, i.u / PI, i.v / PI, normal), false),\r\n        material_next(vec3(1.), r)\r\n    );\r\n}\r\n\r\nmat3 object1_mat_custom = object1_transform_matrix(i.u, i.v);\r\n\r\nr.o = vec4(object1_uv(i.u, i.v), 1.);\r\nr.d = vec4(object1_mat_custom * (inverse(object2_mat_custom) *  r.d.xyz), 0.);\r\nr = normalize_ray(r);\r\n\r\nr.o += r.d * _offset_after_material;\r\n\r\nr = transform(object1_mat, r);\r\nr = normalize_ray(r);\r\n\r\nSurfaceIntersection hit = SurfaceIntersection(true, i.t, i.u, i.v, object1_mat_custom * vec3(1., 0., 0.));\r\nreturn SceneIntersectionWithMaterial(\r\n    SceneIntersection(CUSTOM_MATERIAL, hit, false),\r\n    material_next(vec3(1.), r)\r\n);"))),"object2_to_object1_portal"),(1):Named(((("r = transform(object1_mat_inv, r);\r\nfloat len = length(r.d);\r\nr = normalize_ray(r);\r\nSurfaceIntersection i = intersect_object1(r);\r\ni.t /= len;\r\n\r\nmat3 object1_mat_custom = object1_transform_matrix(i.u, i.v);\r\n\r\nif (teleport_light_u == 0) {\r\n    vec3 normal = adjugate(object1_mat_inv) * object1_mat_custom * vec3(1., 0., 0.);\r\n    return SceneIntersectionWithMaterial(\r\n        SceneIntersection(portal_orange_M, SurfaceIntersection(true, i.t, i.u / PI, i.v / PI, normal), false),\r\n        material_next(vec3(1.), r)\r\n    );\r\n}\r\n\r\nmat3 object2_mat_custom = object2_transform_matrix(i.u, i.v);\r\n\r\nr.o = vec4(object2_uv(i.u, i.v), 1.);\r\nr.d = vec4(object2_mat_custom * (inverse(object1_mat_custom) * r.d.xyz), 0.);\r\nr = normalize_ray(r);\r\n\r\nr.o += r.d * _offset_after_material;\r\n\r\nr = transform(object2_mat, r);\r\nr = normalize_ray(r);\r\n\r\nSurfaceIntersection hit = SurfaceIntersection(true, i.t, i.u, i.v, object2_mat_custom * vec3(1., 0., 0.));\r\nreturn SceneIntersectionWithMaterial(\r\n    SceneIntersection(CUSTOM_MATERIAL, hit, false),\r\n    material_next(vec3(1.), r)\r\n);"))),"object1_to_object2_portal")},storage_order:[(1),(0)]),library:(ids:(available:[],max:7),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal"),(4):Named((("mat3 transpose(mat3 matrix) {\n    vec3 row0 = matrix[0];\n    vec3 row1 = matrix[1];\n    vec3 row2 = matrix[2];\n    mat3 result = mat3(\n        vec3(row0.x, row1.x, row2.x),\n        vec3(row0.y, row1.y, row2.y),\n        vec3(row0.z, row1.z, row2.z)\n    );\n    return result;\n}\n\nfloat det(mat2 matrix) {\n    return matrix[0].x * matrix[1].y - matrix[0].y * matrix[1].x;\n}\n\nmat3 inverse(mat3 matrix) {\n    vec3 row0 = matrix[0];\n    vec3 row1 = matrix[1];\n    vec3 row2 = matrix[2];\n\n    vec3 minors0 = vec3(\n        det(mat2(row1.y, row1.z, row2.y, row2.z)),\n        det(mat2(row1.z, row1.x, row2.z, row2.x)),\n        det(mat2(row1.x, row1.y, row2.x, row2.y))\n    );\n    vec3 minors1 = vec3(\n        det(mat2(row2.y, row2.z, row0.y, row0.z)),\n        det(mat2(row2.z, row2.x, row0.z, row0.x)),\n        det(mat2(row2.x, row2.y, row0.x, row0.y))\n    );\n    vec3 minors2 = vec3(\n        det(mat2(row0.y, row0.z, row1.y, row1.z)),\n        det(mat2(row0.z, row0.x, row1.z, row1.x)),\n        det(mat2(row0.x, row0.y, row1.x, row1.y))\n    );\n\n    mat3 adj = transpose(mat3(minors0, minors1, minors2));\n\n    return (1.0 / dot(row0, minors0)) * adj;\n}")),"inverse"),(5):Named((("SurfaceIntersection intersect_object1(Ray r) {\r\n    r = transform(exact_mat_inv, r);\r\n    float len = length(r.d);\r\n    r = normalize_ray(r);\r\n\r\n    vec3 op = -r.o.xyz;\r\n    float b = dot(op, r.d.xyz);\r\n    float det = b*b - dot(op, op) + 1.0;\r\n    if (det < 0.) return intersection_none;\r\n\r\n    det = sqrt(det);\r\n    float t = b - det;\r\n    vec4 pos = r.o + r.d * t;\r\n    float u = atan(pos.z, pos.x);\r\n    if (t < 0. || (u > 0. && use_half_u == 1)) t = b + det;\r\n    pos = r.o + r.d * t;\r\n    u = atan(pos.z, pos.x);\r\n    if (t < 0. || (u > 0. && use_half_u == 1)) return intersection_none;\r\n    \r\n    float v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\r\n\r\n    return SurfaceIntersection(true, t / len, u, v, vec3(0.));\r\n}\r\n\r\nvec3 object1_uv(float u, float v) {\r\n    return (exact_mat * vec4(cos(u) * sin(v), cos(v), sin(u) * sin(v), 0.)).xyz;\r\n}\r\n\r\nmat3 object1_transform_matrix(float u, float v) {\r\n    float offset = 0.001;\r\n\r\n    vec3 pos = object1_uv(u, v);\r\n\r\n    vec3 du = normalize(object1_uv(u + offset, v) - pos);\r\n    vec3 dv = normalize(object1_uv(u, v  + offset) - pos);\r\n    vec3 dr = cross(du, dv);\r\n    if (inverse_normal_u == 1) dr = -dr;\r\n    return mat3(dr, dv, du);\r\n}\r\n")),"object1"),(6):Named((("SurfaceIntersection intersect_object2(Ray r) {\r\n    return intersect_object1(r);\n}\r\n\r\nvec3 object2_uv(float u, float v) {\r\n    return object1_uv(u, v);\n}\r\n\r\nmat3 object2_transform_matrix(float u, float v) {\r\n    float offset = 0.001;\r\n\r\n    vec3 pos = object2_uv(u, v);\r\n\r\n    vec3 du = normalize(object2_uv(u + offset, v) - pos);\r\n    vec3 dv = normalize(object2_uv(u, v  + offset) - pos);\r\n    vec3 dr = cross(du, dv);\r\n    return mat3(dr, dv, du);\r\n}")),"object2")},storage_order:[(2),(0),(1),(3),(4),(5),(6)]),animations_filters:(uniforms:({((0)):false,((1)):false,((2)):false,((6)):false,((7)):true,((8)):false,((9)):true,((10)):true,((11)):true,((12)):true,((13)):true,((14)):true,((15)):true,((16)):true,((18)):true,((20)):true}),matrices:({((0)):false,((13)):true,((14)):true,((15)):true,((16)):false,((17)):false}),cameras:({((0)):true,((1)):true})),elements_descriptions:(uniforms:({((7)):(help_description:None,overrided_name:"Teleport light"),((9)):(help_description:None,overrided_name:"Debug object 1"),((10)):(help_description:None,overrided_name:"Debug object 2"),((11)):(help_description:None,overrided_name:"U"),((12)):(help_description:None,overrided_name:"V"),((13)):(help_description:None,overrided_name:"Debug matrix"),((14)):(help_description:None,overrided_name:"Invert normal"),((15)):(help_description:None,overrided_name:"Use half sphere"),((16)):(help_description:None,overrided_name:"X scale"),((18)):(help_description:None,overrided_name:"Y scale"),((20)):(help_description:None,overrided_name:"Z scale")}),matrices:({((13)):(help_description:None,overrided_name:"plane"),((14)):(help_description:None,overrided_name:"sphere"),((15)):(help_description:None,overrided_name:"gray sphere")}),cameras:({((0)):(help_description:None,overrided_name:"object1"),((1)):(help_description:None,overrided_name:"object2")})),user_uniforms:(uniforms:({((0)):false,((1)):false,((2)):false,((6)):false,((7)):false,((8)):false,((9)):false,((10)):false,((11)):false,((12)):false,((13)):false,((14)):false,((15)):false,((16)):false,((18)):false,((20)):false}),matrices:({((0)):false,((13)):false,((14)):false,((15)):false,((16)):false,((17)):false})),animation_stages:(ids:(available:[],max:1),storage:{(0):Named((name:(eng:"view",rus:"view"),description:None,uniforms:({((0)):FromDev,((1)):FromDev,((2)):FromDev,((6)):FromDev,((7)):ProvidedToUser,((8)):FromDev,((9)):ProvidedToUser,((10)):ProvidedToUser,((11)):ProvidedToUser,((12)):ProvidedToUser,((13)):ProvidedToUser,((14)):ProvidedToUser,((15)):ProvidedToUser,((16)):ProvidedToUser,((18)):ProvidedToUser,((20)):ProvidedToUser}),matrices:({((0)):FromDev,((13)):ProvidedToUser,((14)):ProvidedToUser,((15)):ProvidedToUser,((16)):FromDev,((17)):FromDev}),original_cam_button:true,set_cam:None,cams:{((0)):true,((1)):true},hidden:false),"view")},storage_order:[(0)]),current_stage:Animation(((0))),dev_stage:(uniforms:({((0)):Float((min:Some(0),max:None,value:6)),((1)):Float((min:Some(0),max:None,value:6)),((2)):Float((min:Some(0),max:None,value:6)),((6)):Progress(0),((7)):Bool(true),((8)):Bool(false),((9)):Bool(false),((10)):Bool(false),((11)):Float((min:None,max:None,value:-0.58)),((12)):Float((min:None,max:None,value:0.92)),((13)):Bool(false),((14)):Bool(true),((15)):Bool(false),((16)):Progress(1),((18)):Progress(1),((20)):Progress(1)}),matrices:({((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((13)):Simple(offset:(1.5,0,0),scale:1,rotate:(0,3.141592653589793,0),mirror:(false,false,false)),((14)):Simple(offset:(-1.5,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((15)):Simple(offset:(0,0.77,0),scale:0.24,rotate:(0,0,0),mirror:(false,false,false)),((16)):Exact(i:(x:Yes(Some(((17)))),y:No(0),z:No(0)),j:(x:No(0),y:Yes(Some(((19)))),z:No(0)),k:(x:No(0),y:No(0),z:Yes(Some(((21))))),pos:(x:No(0),y:No(0),z:No(0)))})),animations:(ids:(available:[],max:0),storage:{},storage_order:[]),use_time:false,skybox:None)